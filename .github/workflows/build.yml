name: Build
on: push
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-22.04]
        mode: [Release, Debug]
        arch: [x64, x86, arm64]
        exclude:
          - os: macos-latest
            arch: x86
          - os: windows-latest
            arch: arm64
          - os: ubuntu-22.04
            arch: x86
          - os: ubuntu-22.04
            arch: arm64
    steps:
    - uses: actions/checkout@v3
    - name: Cache deps
      id: cache-deps
      uses: actions/cache@v3
      with:
        path: $GITHUB_WORKSPACE/third_party/externals
        key: cache-deps-0
    - name: Install Dependencies
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          choco install llvm
          choco install zip
        elif [[ "${{ runner.os }}" == "macOS" ]] ; then
          brew install coreutils
          brew install ninja
        else
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo apt-add-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy main"
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update -qq
          sudo apt-get install -y \
            git g++ g++-multilib clang libc++-dev pandoc dpkg-dev \
            libcurl4-openssl-dev libgif-dev libjpeg-dev \
            libz-dev libpng-dev libtinyxml-dev libpixman-1-dev \
            libx11-dev libxcursor-dev ninja-build zip unzip \
            libfontconfig-dev libgl1-mesa-dev
        fi
    - name: Download depot_tools
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      run: |
        git clone 'https://chromium.googlesource.com/chromium/tools/depot_tools.git'
        echo "::add-path::${PWD}/depot_tools"
    - name: Sync Deps
      run: python3 tools/git-sync-deps
    - name: Generating Ninja Files
      shell: bash
      run: |
        if [[ "${{ matrix.mode }}" == "Debug" ]] ; then
          export is_debug=true
          export is_official=false
        else
          export is_debug=false
          export is_official=true
        fi
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          export gn_flags='win_vc="C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC" win_toolchain_version="15.0" win_sdk="C:\\Program Files (x86)\\Windows Kits\\10" win_sdk_version="10.0.18362.0" cc="clang" cxx="clang++" clang_win="C:\Program Files\LLVM" clang_win_version="9.0.0"'
          if [[ "${{ matrix.mode }}" == "Debug" ]] ; then
            export gn_flags="$gn_flags extra_cflags=[\"-MDd\"]"
          else
            export gn_flags="$gn_flags extra_cflags=[\"-MD\"]"
          fi
        elif [[ "${{ runner.os }}" == "macOS" ]] ; then
          if [[ "${{ matrix.arch }}" == arm64 ]] ; then
            export gn_flags='extra_cflags=["-stdlib=libc++", "-mmacosx-version-min=11.0"] extra_cflags_cc=["-frtti"]'
          else
            export gn_flags='extra_cflags=["-stdlib=libc++", "-mmacosx-version-min=10.9"] extra_cflags_cc=["-frtti"]'
          fi
        else
          export gn_flags='cc="clang" cxx="clang++"'
        fi
        gn gen out/${{ matrix.mode }}-${{ matrix.arch }} --args="is_debug=$is_debug is_official_build=$is_official skia_use_system_expat=false skia_use_system_icu=false skia_use_system_libjpeg_turbo=false skia_use_system_libpng=false skia_use_system_libwebp=false skia_use_system_zlib=false skia_use_sfntly=false skia_use_freetype=true skia_use_harfbuzz=true skia_pdf_subset_harfbuzz=true skia_use_system_freetype2=false skia_use_system_harfbuzz=false target_cpu=\"${{ matrix.arch }}\" $gn_flags"
    - name: Compiling
      run: ninja -C out/${{ matrix.mode }}-${{ matrix.arch }} skia modules
    - name: Copying Files
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          export libext=lib
        else
          export libext=a
        fi
        if [[ "${{ runner.os }}" == "macOS" ]] ; then
          export cp=gcp
        else
          export cp=cp
        fi
        export dst=Skia-${{ runner.os }}-${{ matrix.mode }}-${{ matrix.arch }}
        mkdir $dst
        $cp -R --parents \
          out/${{ matrix.mode }}-${{ matrix.arch }}/args.gn \
          out/${{ matrix.mode }}-${{ matrix.arch }}/*.$libext \
          include \
          src/core/*.h \
          src/gpu/gl/*.h \
          $dst
        find modules -name '*.h' -exec cp --parents {} $dst \;
    - name: Uploading Artifact
      uses: actions/upload-artifact@v1
      with:
        name: Skia-${{ runner.os }}-${{ matrix.mode }}-${{ matrix.arch }}
        path: Skia-${{ runner.os }}-${{ matrix.mode }}-${{ matrix.arch }}
